name: Docker Build and Push

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.TOKEN_GITHUB }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: "latest"

      - name: Get current version
        id: current_version
        run: |
          VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Determine version bump
        id: version_bump
        run: |
          # Get commit messages since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%s" HEAD)
          else
            COMMITS=$(git log --pretty=format:"%s" ${LAST_TAG}..HEAD)
          fi

          echo "Analyzing commits:"
          echo "$COMMITS"

          # Check for breaking changes (major)
          if echo "$COMMITS" | grep -qE "(BREAKING CHANGE|feat!|fix!|perf!)"; then
            echo "bump=major" >> $GITHUB_OUTPUT
            echo "Found breaking change - MAJOR bump"
          # Check for features (minor)
          elif echo "$COMMITS" | grep -qE "^feat"; then
            echo "bump=minor" >> $GITHUB_OUTPUT
            echo "Found feature - MINOR bump"
          # Check for fixes (patch)
          elif echo "$COMMITS" | grep -qE "^(fix|perf|refactor|docs|style|test|chore)"; then
            echo "bump=patch" >> $GITHUB_OUTPUT
            echo "Found fix/improvement - PATCH bump"
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
            echo "No conventional commit found - defaulting to PATCH bump"
          fi

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT="${{ steps.current_version.outputs.version }}"
          BUMP="${{ steps.version_bump.outputs.bump }}"

          IFS='.' read -ra PARTS <<< "$CURRENT"
          MAJOR=${PARTS[0]}
          MINOR=${PARTS[1]}
          PATCH=${PARTS[2]}

          case $BUMP in
            major)
              NEW_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
              ;;
            patch)
              NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
              ;;
          esac

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update version
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          CURRENT="${{ steps.current_version.outputs.version }}"

          sed -i "s/version = \"$CURRENT\"/version = \"$NEW_VERSION\"/" pyproject.toml

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml
          git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
          git tag "v$NEW_VERSION"
          git push
          git push --tags

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Convert repository name to lowercase
        id: lowercase
        run: |
          echo "image_name=$(echo '${{ env.IMAGE_NAME }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ steps.lowercase.outputs.image_name }}:${{ steps.new_version.outputs.new_version }}
            ${{ env.REGISTRY }}/${{ steps.lowercase.outputs.image_name }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Summary
        run: |
          echo "üöÄ Release ${{ steps.new_version.outputs.new_version }} completed!"
          echo "üê≥ Docker image pushed to Docker Hub"
          echo "üè∑Ô∏è Tags: ${{ steps.new_version.outputs.new_version }}, latest"
