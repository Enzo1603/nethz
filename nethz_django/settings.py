"""
Django settings for nethz_django project.

Generated by 'django-admin startproject' using Django 4.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from decouple import config

from django.core.exceptions import ImproperlyConfigured
from django.contrib.messages import constants as messages

APPEND_SLASH = False

ENVIRONMENT = config("ENVIRONMENT", default="production", cast=str)
PRODUCTION_DOMAINS = config("PRODUCTION_DOMAINS", default=None)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config(
    "SECRET_KEY",
    cast=str,
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False  # Set to True only in development environment

ALLOWED_HOSTS = []

if ENVIRONMENT == "development":
    DEBUG = True
    ALLOWED_HOSTS.append("*")
    MESSAGE_LEVEL = messages.DEBUG

if ENVIRONMENT == "testing":
    DEBUG = False
    ALLOWED_HOSTS.append("*")

if ENVIRONMENT == "production":
    DEBUG = False

    if PRODUCTION_DOMAINS:
        # To avoid adding empty strings to allowed hosts
        ALLOWED_HOSTS.extend(
            domain.strip() for domain in PRODUCTION_DOMAINS.split(",") if domain.strip()
        )

    if not ALLOWED_HOSTS:
        raise ImproperlyConfigured(
            "PRODUCTION_DOMAINS must be set in production environment OR"
            "update ALLOWED_HOST in the projects settings.py"
        )


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "crispy_forms",
    "crispy_bootstrap5",
    "accounts.apps.AccountsConfig",
    "lib",
    "main.apps.MainConfig",
    "worldle.apps.WorldleConfig",
]


CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "nethz_django.middleware.EmailVerificationMiddleware",
]

ROOT_URLCONF = "nethz_django.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,   # Do not disable, needed for crispyforms!
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "lib.context_processors.inject_utcnow",
            ],
        },
    },
]

WSGI_APPLICATION = "nethz_django.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db" / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "accounts.CustomUser"


LOGIN_URL = "accounts:login"
LOGOUT_URL = "accounts:logout"

LOGIN_REDIRECT_URL = "worldle:home"
LOGOUT_REDIRECT_URL = "main:home"

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "de"
USE_I18N = True
LANGUAGES = [
    ("en", "English (US)"),
    ("de", "German (CH)"),
]
LOCALE_PATHS = [BASE_DIR / "locale"]


USE_TZ = True
TIME_ZONE = config("TZ", default="UTC", cast=str)


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [BASE_DIR / "static"]


if ENVIRONMENT == "production" or ENVIRONMENT == "testing":
    STATIC_URL = "assets/"
    STATIC_ROOT = (
        BASE_DIR / "assets"
    )  # python manage.py collectstatic saves files there
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# ENVIRONMENT = config("ENVIRONMENT", default="production", cast=str)
# PRODUCTION_DOMAINS = config("PRODUCTION_DOMAINS", default=None)


EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = config("EMAIL_HOST", default=None)
EMAIL_PORT = config("EMAIL_PORT", default=None, cast=int)
EMAIL_HOST_USER = config("EMAIL_HOST_USER", default=None)
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD", default=None)
EMAIL_USE_TLS = config("EMAIL_USE_TLS", default=True, cast=bool)
DEFAULT_FROM_EMAIL = config("DEFAULT_FROM_EMAIL", default=EMAIL_HOST)

if any(
    [
        not EMAIL_HOST,
        not EMAIL_PORT,
        not EMAIL_HOST_USER,
        not EMAIL_HOST_PASSWORD,
        # not DEFAULT_FROM_EMAIL,
    ]
):
    raise ImproperlyConfigured(
        "Email not properly configured!\n\n"
        "EMAIL_HOST, EMAIL_PORT, EMAIL_HOST_USER, EMAIL_HOST_PASSWORD, DEFAULT_FROM_EMAIL must be set in the environment."
    )


# Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "simple": {
            "format": "{levelname} {asctime} {name}: {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
    },
    "loggers": {
        "django.request": {
            "handlers": ["console"],
            "level": "WARNING",
            "propagate": False,
        },
        "django.security": {
            "handlers": ["console"],
            "level": "WARNING",
            "propagate": False,
        },
        "nethz_django": {
            "handlers": ["console"],
            "level": "INFO",
            "propagate": False,
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "WARNING",
    },
}

if DEBUG:
    LOGGING["loggers"]["django.request"]["level"] = "INFO"
